<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<search>
    
     <entry>
        <title>DroneCI&#43;Github入坑指北</title>
        <url>https://blog.thewinds.cn/post/droneci&#43;github%E5%85%A5%E5%9D%91%E6%8C%87%E5%8C%97/</url>
        <categories>
          <category>技术</category>
        </categories>
        <tags>
          <tag>技术</tag><tag>Drone</tag><tag>CI</tag><tag>docker</tag>
        </tags>
        <content type="html">  DroneCI&#43;Github入坑指北 ##简介
 Automate Software Testing and Delivery Drone is a self-service Continuous Delivery platform for busy development teams.
 Drone是一个为繁忙的开发团队提供的自助式连续交付平台。
除了Drone目前做的比较成熟的还有Gitlab-CI、Jenkins、最近新推出的Github-Actions等。因为Drone占用的资源比较少，并且喜欢它的容器即插件的理念，(是我大Golang写的)所以选择用它来体验一下CI。
！但是不得不吐槽的是Drone的文档做的很烂。。所以希望这篇文章能让你少走弯路😇
本文用的是Drone最新版本,不是网上很多1.0之前的版本,根据这个教程走下去应该不会有什么问题。
配置 整个CI流程需要通过 git hook来触发,Drone支持Github、GitLab、Gitea、Gogs、Bitbucket Cloud、Bitbucket Server几种SCM(source control management),期初我是使用gogs来搭建的，由于https证书问题产生的x509错误最终放弃了gogs方案，最终使用的是github&#43;drone。
Github相关配置 Drone和Github交互需要通过OAuth进行鉴权,所以要先申请一个OAuth应用。
打开github.com点击头像,选择Settings / Developer settings / OAuth Apps,然后点击New OAuth App创建OAuth应用。
其中http://cici.xxxx.com是你部署Drone的域名，注意callback url 不要填错。
然后注册应用,记录下其中的ClientID和ClientSecret下面要用到
docker-compose相关配置 我这里是通过docker的方式安装的，docker-compose编排。
安装Drone需要一个drone-server和drone-runner，
 drone-runner不是必选的,官方不推荐吧runner和server安装在一个实例上，如果你安装到一个实例上的话可以设置DRONE_AGENTS_ENABLED=false,drone-server将会作为默认的runner,我这为了演示,runner和server是在一个同服务器上的。
 docker-compose.yml 文件:
version: &#39;2&#39; services: drone-server: image: drone/drone:latest container_name: drone-server networks: - dronenet	# 让drone-server和drone-agent处于一个网络中,方便进行RPC通信 ports: - &#39;10081:80&#39;	# Web管理面板的入口 PROTO=http 时使用该端口 - &#39;10082:443&#39;	# Web管理面板的入口 PROTO=https 时使用该端口 - &#39;10083:9000&#39;	# RPC服务端口 volumes: - /var/run/docker.sock:/var/run/docker.sock	# docker.sock [1] - /var/data/drone/:/var/lib/drone	# drone数据存放路径 environment: - DRONE_AGENTS_ENABLED=true	# 使用Runner - DRONE_GITHUB_SERVER=https://github.com	# github的地址 - DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}	# 上一步获得的ClientID - DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}	# 上一步获得的ClientSecret - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}	# RPC秘钥	[2] - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}	# RPC域名(在一个实例上可以不用) - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}	# git webhook使用的协议(我建议http) - DRONE_OPEN=true	# 开发drone - DRONE_DATABASE_DATASOURCE=/var/lib/drone/drone.sqlite	# 数据库文件 - DRONE_DATABASE_DRIVER=sqlite3	# 数据库驱动,我这里选的sqlite - DRONE_DEBUG=true	# 调试相关,部署的时候建议先打开 - DRONE_LOGS_DEBUG=true	# 调试相关,部署的时候建议先打开 - DRONE_LOGS_TRACE=true	# 调试相关,部署的时候建议先打开 - DRONE_USER_CREATE=username:TheWinds,admin:true	# 初始管理员用户 - TZ=Asia/Shanghai	# 时区 restart: always drone-agent: image: drone/agent:latest container_name: drone-agent networks: - dronenet	# 让drone-server和drone-agent处于一个网络中,方便进行RPC通信 depends_on: - drone-server volumes: - /var/run/docker.sock:/var/run/docker.sock # docker.sock [1] environment: - DRONE_RPC_SERVER=http://drone-server	# RPC服务地址 - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}	# RPC秘钥 - DRONE_RPC_PROTO=${DRONE_RPC_PROTO}	# RPC协议(http || https) - DRONE_RUNNER_CAPACITY=2	# 最大并发执行的 pipeline 数 - DRONE_DEBUG=true	# 调试相关,部署的时候建议先打开 - DRONE_LOGS_DEBUG=true	# 调试相关,部署的时候建议先打开 - DRONE_LOGS_TRACE=true	# 调试相关,部署的时候建议先打开 - TZ=Asia/Shanghai restart: always networks: dronenet:	# 让drone-server和drone-agent处于一个网络中,方便进行RPC通信   **[1] ** 因为插件本身也是一个容器，要在容器中(docker-server、drone-runnere)中运行容器。将docker.sock挂载到容器中，可以让容器通过docker unix socket API得到管理容器的能力。 [2] 你可以通过 openssl rand -hex 16 这个命令随机生成秘钥  .env文件:
DRONE_GITHUB_CLIENT_ID=your_github_client_id DRONE_GITHUB_CLIENT_SECRET=your_github_client_secret DRONE_RPC_SECRET=your_rpc_secret DRONE_SERVER_HOST=cici.xxxx.com DRONE_SERVER_PROTO=http DRONE_RPC_SERVER=rpc.cici.xxxx.com DRONE_RPC_PROTO=http  启动 将docker-compose.yml和.env文件上传至服务器同一目录,然后执行
docker-compose up -d  启动服务,一起顺利的话打开你的域名你将会看到
OAuth的授权页面,进行授权之后就可以看到管理面板了 💜
使用 基本使用基本上参考https://docs.drone.io/上面的文档就可以了，没什么好说的，下面我主要想说一下Secret管理和私有仓库的使用方法。
###Secret管理
CI工作流编排是写在仓库中的.drone.yml中的,如果我们想进行一些私有的操作(比如ssh_key,用于通知的账号密码…)就要把这些敏感信息写在yml里，而这些私有信息的暴露肯定是不允许发生的。所以这些秘密信息一般在构建过程中由CI工具注入到环境变量中的。
drone支持多种secret管理方式,最基本和最方便的方式就是直接通过Web后台进行管理。
打开Repositories/your_repo_name/settings 找到Secrets选项卡,输入Secret Name和Secret Value就可以添加Name=&amp;gt;Value的秘钥键值对了,这些秘钥将在构建过程中被注入。
下面就来试一下
 Github创建项目 drone_test_pub  . ├── .drone.yml └── main.go   main.go  package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strings&amp;quot; ) func main() { aSecret := os.Getenv(&amp;quot;A_SECRET&amp;quot;) fmt.Println(aSecret) fmt.Println(reverseString(aSecret)) } func reverseString(s string) string { r := []rune(s) sb := strings.Builder{} for i := len(r) - 1; i &amp;gt;= 0; i-- { sb.WriteRune(r[i]) } return sb.String() }   .drone.yml  --- kind: pipeline type: docker name: default steps: - name: build image: golang environment: A_SECRET: from_secret: a_secret commands: - echo $$A_SECRET - go run . &amp;gt; test_secret.txt - cat test_secret.txt   Drone管理面板,激活仓库drone_test_pub 并创建一个仓库级别的Secret a_secret = terces elbakaepsnu  
 推送代码到Github查看构建情况  ▶ git commit --allow-empty [master 0460b0d] test push ▶ git push Enumerating objects: 1, done. Counting objects: 100% (1/1), done. Writing objects: 100% (1/1), 179 bytes | 179.00 KiB/s, done. Total 1 (delta 0), reused 0 (delta 0) To github.com:TheWinds/drone_test_pub.git 0ccca9b..0460b0d master -&amp;gt; master  4.构建结果
从活动流里可以看到,已经成功进行了克隆和构建,首先是进行了默认的clone步骤，然后进行的build步骤。
从build的执行结果来看,我们 echo $A_SECRET的时候得到的是一个掩码********,然后在main.go将 $A_SECRET进行反转后得到了unspeakable secret说明已经成功得到了注入的Secret。
通过查看Drone-Runtime的源码可以看到,运行的时候对于要显示在控制台的内容,都会把Secret Value 加入到string replacer中,统一被替换为掩码********。然而这并没有什么卵用,通过字符串操作就能使其输出未进行掩码的Secret，然后就能进行还原了。。


克隆私有仓库 Drone默认会有一个Clone的步骤,要克隆私有仓库要把这个步骤关闭。
然后把Github该仓库的 deploy_key对应的私钥设为Secret注入到 SSH_KEY 环境变量中。
接下来创建一个clone的步骤,我这里使用的是alpine/git的镜像，通过echo &amp;quot;$$SSH_KEY&amp;quot; &amp;gt; /root/.ssh/id_rsa吧私钥写入到id_rsa中，git clone 填写你的私有仓库ssh地址就可以进行克隆了。
 deploy_key相比github的全局sshkey，可以控制到仅克隆仓库的权限，适合进行部署操作,具体怎么去设置我就不再赘述了
生成一对sshkey可以用 ssh-keygen -t rsa -b 4096 -C &amp;quot;your_email&amp;quot; 这个命令
  .drone.yml  --- kind: pipeline type: docker name: default clone: disable: true steps: - name: clone image: alpine/git environment: SSH_KEY: from_secret: ssh_key commands: - mkdir -p /root/.ssh/ - echo &amp;quot;$$SSH_KEY&amp;quot; &amp;gt; /root/.ssh/id_rsa - chmod -R 600 /root/.ssh/ - ssh-keyscan -t rsa github.com &amp;gt;&amp;gt; ~/.ssh/known_hosts - git clone -v git@github.com:TheWinds/drone_test.git . - name: build image: golang commands: - go run . &amp;gt; hello.txt - cat hello.txt  结语 DroneCI断断续续搞了将近一周的时间,期间因为文档不清楚找不到问题还放弃了几次🙃。但是都开始了，就很难放弃，查了很多资料看了一下源码后终于整好了。
祝你好运。
</content>
    </entry>
    
     <entry>
        <title>MacOS系统Docker默认存储路径迁移方法</title>
        <url>https://blog.thewinds.cn/post/macos%E7%B3%BB%E7%BB%9Fdocker%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84%E8%BF%81%E7%A7%BB%E6%96%B9%E6%B3%95/</url>
        <categories>
          <category>技术</category>
        </categories>
        <tags>
          <tag>docker</tag><tag>macos</tag>
        </tags>
        <content type="html">  MacOS系统Docker默认存储路径迁移方法  对于仅有120G的固态硬盘来说，Docker占用的存储空间感到压力山大。搜了一圈才找到迁移修改默认存储位置的方法，特此记录一下。
 先说修改方法 Docker MacOS版本默认的存储路径是
~/Library/Containers/com.docker.docker/  思路就是先把这个文件夹移动到其他（你的其他硬盘或分区）位置，然后再将新位置创建一个软链接到这里来。
第一步将docker文件夹复制到新位置，因为socket文件是不允许直接复制的，所以可以用rsync来进行同步实现复制
rsync -a ~/Library/Containers/com.docker.docker/ /Volumes/xxxx  第二步将原来的docker文件夹重命名为 com.docker.docker.old
mv com.docker.docker com.docker.docker.old  第三步将新路径软链接过来
# cd ~/Library/Containers ln -s /Volumes/xxxx com.docker.docker  第四部启动docker，如果正常启动删除掉原来的docker文件夹即可
rm com.docker.docker.old  顺便吐槽下，两年前买的¥379 买的120G SSD，现在可以买480G了 🙂
参考 [1] Change Docker Image Directory for Mac?
EOF </content>
    </entry>
    
     <entry>
        <title>博客搭建记录</title>
        <url>https://blog.thewinds.cn/post/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
        <categories>
          <category>技术</category>
        </categories>
        <tags>
          <tag>博客</tag><tag>git</tag><tag>hugo</tag><tag>caddy</tag>
        </tags>
        <content type="html">   一直以来都想搭建一个自己的博客,记录一些问题或者心得. 利用十一假期的时间部署了一个博客
 0x00 写之前 本来想着自己写一个博客,能够支持配置主题样式,自动抓取git上托管的文章&amp;hellip;,后来发现别人已经做得很好了（自己太懒）比如 hexo,hugo 所以决定选择一个静态博客生成器然后修改一下主题来满足一下自己的需求.
0x01 搜刮一波 于是就去github上搜了一下静态博客生成器,比较好的有两个:Hexo 和 Hugo Hugo是用golang写的,身为一个golang粉当然果断选择了他 哈哈哈。OK生成器选好了之后下一步就是取选一个合适的主题了。
0x02 纠结. 去官网看了一下,主题是不少但是感觉好看的确实不多。搜索半天找不到一个合适的足以让你产生算了还是自己搞一个吧这种冲动。= =| 最后发现了一个叫Next的主题，clone到theme目录感觉还不错,然后就开始各种配置。
首先创建博客站点:
mkdir blog hugo new site . hugo new post/hello.md  然后 cd themes 进入到主题目录 git clone path/to/theme/repo 然后把主题中的config.toml 复制到博客 根目录  配置一下域名网站介绍个人信息&amp;hellip;.
0x03 使用theme遇到的坑 配置好主题后,运行 hugo 进行编译,发现报错,看了下错误信息大概是遇到了len typed nil error,也就是对一个nil 的 数组取长度,经过排查发现是因为没设置分类或者标签导致.Site.Taxonomies.categories == nil, hugo主题使用的模板引擎是go自带的模板引擎所以直接在模板里判断一下数组是否为nil,果然成功。问题解决 fork一份原主题改好之后给作者发个PR做个贡献~ 修改过的 hugo-theme-next
0x04 编译运行. 在博客根目录运行 hugo 命令后会自动扫描博文目录和主题中的模板和样式,然后把所有的文章和页面生成静态网页输出到 public 文件夹,我们只需把 public 文件夹中的内容放到服务器上即可。当然如果想在本地编辑文章后及时预览,只需要使用hugo server 就可以自动监控 data,content,layouts,static 目录的改动自动进行编译，打开 http://localhost:1313/ 即可看到生成的博客。
0x05 部署到服务器上 对于博客最初的设想就是能够在编辑过文章之后一个命令推送到服务器上。最简单的做法就是用一个Github Page。但是又想把网站放在自己服务器上,于是就把Github作为一个中转的地方。 这样的话有两种方式来实现一种是 使用 Github WebHook PC 上 commit 到Github之后，Github通知服务器进行拉取。另外一种就是服务器定期(比如一分钟)从Github pull 一次。 本着节省资源的想法,就入了使用WebHook的坑,服务器使用的是Caddy,加入git插件和hugo插件之后实现了自动拉取然后编译,但是效果并不是很好,容易出问题(具体细节就不说了..)。于是决定用第二种方式,每分钟拉取一次,简单粗暴 :) 。Caddy 配置如下:
blog.thewinds.cn:443 { gzip #开启gzip压缩 log /var/log/caddy/blog_thewinds_cn.log #保存日志 root /var/www/blog.thewinds.cn/public #网站根目录 tls wind_ns@163.com #自动申请tls git github.com/thewinds/blog { #git 远程仓库地址 path /var/www/blog.thewinds.cn #同步到本地路径的地址 interval 60 #同步周期 } }  再次感受到了Caddy的清爽配置,特别是一个 tls&#43;邮箱就开启了https 爽~
0x06 还是有点懒 现在博客基本搭建完成了,以后发布文章的主要流程就是:
修改新增/博文 -&amp;gt; hugo 重新生成静态页面 -&amp;gt; git add -&amp;gt; git commit -&amp;gt; git push  然后服务器就会自动pull下来,新的内容就出现了。 说好的一个命令,所以还是写个shell吧。。
echo &amp;quot;更新说明:$1&amp;quot; hugo &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m &amp;quot;$1&amp;quot; &amp;amp;&amp;amp; git push  保存为 push_plog.sh
Ok 以后写好文章直接 执行 ./push_plog.sh  更新说明就好了。
</content>
    </entry>
    
     <entry>
        <title>Shadowshocks爬梯指南</title>
        <url>https://blog.thewinds.cn/post/shadowshocks%E7%88%AC%E6%A2%AF%E6%8C%87%E5%8D%97/</url>
        <categories>
          <category>技术</category>
        </categories>
        <tags>
          <tag>科学上网</tag>
        </tags>
        <content type="html">   作为一个程序猿总是想去外面的世界自由探索,无奈天朝墙太高,让查资料，github等工作都变得很坑…
本文将介绍如何使用ShadowSocks进行翻墙.
按照以下步骤进行即可
 1.安装 ss-qt5 ss-qt5是一个图形化的shadowshocks客户端,
安装之后选择 服务器=&amp;gt;打开服务器设定,
输入服务器信息即可.
Linux
sudo apt-get install ss-qt5  Mac
brew install ss-qt5  2.安装chrome拓展 安装chrome拓展的目的是自由切换国内国外路线,只有国外走代理 - 打开chrome应用商店
 下载 SwitchyOmega这个应用
 选择新建情景模式
 名称随意填写,类型选择代理服务器
 然后代理协议选择SOCKS5,代理服务器和端口填上ss客户端的代理服务器和端口,我这里是127.0.0.1 和 1080
 将不代理的地址列表中的内容清空
 按照如下规则新建
  规则列表地址为 https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 到此为止,浏览器就可以愉快的翻墙了.
3.在终端里使用代理[可选] 安装prioxy
sudo apt-get install privoxy  修改prioxy的配置文件
gedit /etc/privoxy/config  注释掉原来的 listen-address 127.0.0.1:8118
在最后添加
forward-socks5 / 127.0.0.1:1080 . listen-address 127.0.0.1:8118  然后重启
sudo service privoxy restart  最后 在终端中使用代理
export http_proxy=&amp;quot;127.0.0.1:8118&amp;quot; export https_proxy=&amp;quot;127.0.0.1:8118&amp;quot;  enjoy it :) </content>
    </entry>
    
     <entry>
        <title>Posts</title>
        <url>https://blog.thewinds.cn/post/</url>
        <categories>
          
        </categories>
        <tags>
          
        </tags>
        <content type="html"> </content>
    </entry>
    
</search>